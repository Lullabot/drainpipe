name: 'Push code to Acquia'
description: 'Pushes code to an Acquia environment'
inputs:
  environment:
    description: "The environment to push to, either uuid or alias"
    required: true
  commit-message:
    description: "The commit message to use when pushing to Acquia"
    required: true
  api-key:
    description: "Acquia API Key"
    required: true
  api-secret:
    description: "Acquia API Secret"
    required: true
  acquia-ssh-private-key:
    description: "Acquia SSH Private Key"
    required: true
runs:
  using: "composite"
  steps:
    - name: Push to Acquia
      run: |

        source .github/actions/drainpipe/set-env/bash_aliases

        echo "Debug: API KEY"
        echo ${{ inputs.api-key }}| cut -c 1-4

        # debug
        key="${{ inputs.acquia-ssh-private-key }}"
        if [ -z "$key" ]; then
          echo "❌ Key is empty"
        else
          echo "✅ Key is present. Length: ${#key}"
          echo "Prefix (masked):"
          echo "::add-mask::$(echo "$key" | cut -c -10)"
          echo "$(echo "$key" | cut -c -10)"
        fi

        drainpipe_exec "echo \"${{ inputs.acquia-ssh-private-key }}\" > ~/.ssh/id_rsa"
        drainpipe_exec "chmod 600 ~/.ssh/id_rsa"

        drainpipe_exec "ACQUIA_API_KEY=${{ inputs.api-key }} ACQUIA_API_SECRET=${{ inputs.api-secret }} ./vendor/bin/task acquia:auth"

        echo "Debug: Getting environment info"
        ENV_INFO=$(drainpipe_exec "acli --no-interaction api:environments:find ${{ inputs.environment }}")

        VCS_TYPE=$(echo $ENV_INFO | jq -r ".vcs.type")
        if [ "$VCS_TYPE" != "git" ]; then
          echo "Unrecognised VCS type"
          exit 1
        fi

        BRANCH=$(echo $ENV_INFO | jq -r ".vcs.path")
        REMOTE_VCS=$(echo $ENV_INFO | jq -r ".vcs.url")
        REMOTE_HOST=$(echo "$REMOTE_VCS" | awk -F'[@:]' '{print $2}')
        REMOTE_SSH_URL=$(echo $ENV_INFO | jq -r ".ssh_url" | awk -F'[@:]' '{print $2}')

        # Add Remote Hostf from VCS to known_hosts.
        echo "Keyscanning $REMOTE_HOST"
        drainpipe_exec "ssh-keyscan -H $REMOTE_HOST >> ~/.ssh/known_hosts" || true
        echo "Keyscanning $REMOTE_SSH_URL"
        drainpipe_exec "ssh-keyscan -H $REMOTE_SSH_URL >> ~/.ssh/known_hosts" || true

        # Create a temporary directory for the release.
        RELEASE_DIR=$(drainpipe_exec "mktemp -d")

        # Run the deploy task.
        drainpipe_exec "./vendor/bin/task deploy:git directory=\"$RELEASE_DIR\" branch=\"$BRANCH\" remote=\"$REMOTE_VCS\" message=\"${{ inputs.commit-message }}\""
        # Run code-switch to the same branch so we wait for everything to sync.
        drainpipe_exec "acli api:environments:code-switch --task-wait ${{ inputs.environment }} \"$BRANCH\""

      shell: bash

