name: 'Install and Start DDEV'
description: 'Installs the latest or specified version of DDEV and starts the project'
inputs:
  ssh-private-key:
    description: "SSH Private Key"
    required: false
  ssh-known-hosts:
    description: "SSH Known Hosts"
    required: false
  git-email:
    description: "Git e-mail address"
    required: false
  git-name:
    description: "Git name"
    required: false
  composer-cache-dir:
    description: "Composer cache directory, relative to the project workspace. Set to false to disable."
    required: false
  version:
    description: "Override the DDEV version .e.g. '1.19.0'"
    required: false
outputs:
  drainpipe_ddev:
    description: "Flag indicating that DDEV is installed and should be used by drainpipe_exec"
    value: ${{ steps.flag.outputs.drainpipe_ddev }}
runs:
  using: "composite"
  steps:
    - name: Install and Start DDEV
      id: flag
      run: |
        curl https://apt.fury.io/drud/gpg.key | sudo apt-key add -
        echo "deb https://apt.fury.io/drud/ * *" | sudo tee -a /etc/apt/sources.list.d/ddev.list
        sudo apt update
        sudo apt install libnss3-tools -y

        mkdir -p .ddev/homeadditions/.ssh
        # Copy private key
        if [ "${SSH_PRIVATE_KEY}" != "" ]; then
          echo "${SSH_PRIVATE_KEY}" > .ddev/homeadditions/.ssh/id_rsa
          chmod 600 .ddev/homeadditions/.ssh/id_rsa
        fi
        # Copy known hosts
        if [ "${SSH_KNOWN_HOSTS}" != "" ]; then
          echo "${SSH_KNOWN_HOSTS}" > .ddev/homeadditions/.ssh/known_hosts
          chmod 644 .ddev/homeadditions/.ssh/known_hosts
        fi
        # SSH config file
        touch .ddev/homeadditions/.ssh/config

        # Disable strict host key checking for Pantheon as ssh-keyscan will not
        # return a stable response.
        if [ -f "pantheon.yml" ]; then
          echo -e "Host *.drush.in\\n\\tStrictHostKeyChecking no\\n\tLogLevel ERROR\\n" >> .ddev/homeadditions/.ssh/config
        fi

        chmod 600 .ddev/homeadditions/.ssh/config

        chmod 700 .ddev/homeadditions/.ssh

        # Download and run the DDEV installer
        if [ "${VERSION}" != "" ]; then
          sudo apt install -y ddev=${VERSION}
        else
          sudo apt install -y ddev
        fi

        # Support local runner https://github.com/nektos/act
        if [ "$ACT" != "" ]; then
          sudo chown runner:docker /var/run/docker.sock
        fi

        ddev config global --instrumentation-opt-in=false --omit-containers=ddev-ssh-agent

        if [ "${COMPOSER_CACHE_DIR}" != "false" ]; then
          # @todo Replace /var/www/html with an environment variable.
          CACHE_DIR=".ddev/.drainpipe-composer-cache"
          if [ "${COMPOSER_CACHE_DIR}" != "" ]; then
            CACHE_DIR="${COMPOSER_CACHE_DIR}"
          fi
          # Workaround for https://github.com/ddev/ddev/issues/6044
          if yq -re .type .ddev/config.yaml; then
            ddev config --web-environment-add="COMPOSER_CACHE_DIR=/var/www/html/$CACHE_DIR" --project-type="$(yq -re .type .ddev/config.yaml)"
          else
            ddev config --web-environment-add="COMPOSER_CACHE_DIR=/var/www/html/$CACHE_DIR"
          fi
        fi

        ddev start
        ddev describe

        # Copy git credentials
        ddev exec "git config --global user.name \"${GIT_NAME}\""
        ddev exec "git config --global user.email \"${GIT_EMAIL}\""

        echo "drainpipe_ddev=true" >> $GITHUB_OUTPUT
      shell: bash
      env:
        SSH_PRIVATE_KEY: ${{ inputs.ssh-private-key }}
        SSH_KNOWN_HOSTS: ${{ inputs.ssh-known-hosts }}
        GIT_EMAIL: ${{ inputs.git-email }}
        GIT_NAME: ${{ inputs.git-name }}
        COMPOSER_CACHE_DIR: ${{ inputs.composer-cache-dir }}
        VERSION: ${{ inputs.version }}

