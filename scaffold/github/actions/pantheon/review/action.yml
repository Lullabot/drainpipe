name: 'Deploy Review epp to Pantheon'
description: 'Deploys a review app to Pantheon Multidev'
inputs:
  github-token:
    description: "GitHub token as generated automatically in inputs.github-token"
    required: true
  terminus-token:
    description: "Pantheon Terminus Token"
    required: true
  site-name:
    description: "Pantheon site machine name"
    required: true
  run-installer:
    description: "Whether or not to run the Drupal site installer. Defaults to false."
    required: false
  commit-message:
    description: "The commit message to use when pushing to Pantheon"
    required: true
  lock-username:
    description: "The username if locking this environment with Basic Auth"
    required: false
  lock-password:
    description: "The password if locking this environment with Basic Auth"
    required: false
runs:
  using: "composite"
  steps:
    - uses: ./.github/actions/drainpipe/set-env

    - name: Create GitHub Deployment
      run: |
        export GITHUB_DEPLOYMENT=$(curl -f -X POST \
            https://api.github.com/repos/$GITHUB_REPOSITORY/deployments \
            -H 'Accept: application/vnd.github.v3+json' \
            -H "Authorization: token ${{ inputs.github-token }}" \
            -d "{\"ref\": \"$DRAINPIPE_SHA\", \"auto_merge\": false, \"environment\": \"pantheon-pr-$DRAINPIPE_PR_NUMBER\", \"transient_environment\": true, \"required_contexts\": [], \"description\": \"Pantheon Multidev for Pull Request #$DRAINPIPE_PR_NUMBER\"}" \
        )
        export GITHUB_DEPLOYMENT_ID=$(echo $GITHUB_DEPLOYMENT | jq '.id')
        echo "GITHUB_DEPLOYMENT_ID=$GITHUB_DEPLOYMENT_ID" >> $GITHUB_ENV
        echo "Created GitHub Deployment ID $GITHUB_DEPLOYMENT_ID"
        if [ -z "$GITHUB_DEPLOYMENT_ID" ] || [ "$GITHUB_DEPLOYMENT_ID" = "null" ]; then echo $GITHUB_DEPLOYMENT && exit 1; fi
        curl -f -H "Authorization: token ${{ inputs.github-token }}" -X POST -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/$GITHUB_REPOSITORY/deployments/$GITHUB_DEPLOYMENT_ID/statuses -d '{"state":"in_progress"}'
      shell: bash

    - name: Clean Stale Environments
      run: |
        source .github/actions/drainpipe/set-env/bash_aliases
        echo "Cleaning stale Multidev environments"
        drainpipe_exec "terminus auth:login --machine-token=\"${{ inputs.terminus-token }}\""
        PULLS=$(curl -f \
            https://api.github.com/repos/$GITHUB_REPOSITORY/pulls?state=open \
            -H 'Accept: application/vnd.github.v3+json' \
            -H "Authorization: token ${{ inputs.github-token }}" \
        )
        PULL_NUMBERS=$(echo $PULLS | jq '.[] | "pr-" + (.number|tostring)')
        MULTIDEVS=$(drainpipe_exec "terminus multidev:list --format json ${{ inputs.site-name }} | jq --raw-output 'keys | .[]'")
        for MULTIDEV in $MULTIDEVS; do
          if [[ "$PULL_NUMBERS[*]" =~ "$MULTIDEV" ]]; then
            echo "Found open PR for $MULTIDEV"
          # if $MULTIDEV starts with "pr-"
          elif [[ $MULTIDEV == pr-* ]]; then
            echo "No PR for $MULTIDEV, shutting down..."
            DEPLOYMENTS=$(curl -s -f -H "Authorization: token ${{ inputs.github-token }}" -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/$GITHUB_REPOSITORY/deployments?environment=pantheon-$MULTIDEV | jq '.[] | .id')
            for DEPLOYMENT_ID in $DEPLOYMENTS; do
              echo "Marking GitHub Deployment $DEPLOYMENT_ID as inactive"
              curl -f -H "Authorization: token ${{ inputs.github-token }}" -X POST -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/$GITHUB_REPOSITORY/deployments/$DEPLOYMENT_ID/statuses -d "{\"state\":\"inactive\"}"
              curl -H "Authorization: token ${{ inputs.github-token }}" -X DELETE -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/$GITHUB_REPOSITORY/environments/pantheon-$MULTIDEV
            done
            drainpipe_exec "terminus multidev:delete ${{ inputs.site-name }}.$MULTIDEV --delete-branch --yes"
          else
            "Dangling Multidev environment $MULTIDEV found, no action taken."
          fi
        done
      shell: bash

    - name: Create Multidev or Wipe existing Multidev
      run: |
        source .github/actions/drainpipe/set-env/bash_aliases
        drainpipe_exec "terminus auth:login --machine-token=\"${{ inputs.terminus-token }}\""
        JQ_COMMAND="'.[] | select(.id == \"pr-$DRAINPIPE_PR_NUMBER\") | .id'"
        ENVIRONMENT_EXISTS=$(drainpipe_exec "terminus multidev:list --format json ${{ inputs.site-name }} | jq --raw-output $JQ_COMMAND")
        if [ "$ENVIRONMENT_EXISTS" == "pr-$DRAINPIPE_PR_NUMBER" ]; then
          drainpipe_exec "terminus env:wipe ${{ inputs.site-name }}.pr-$DRAINPIPE_PR_NUMBER --yes"
        else
          drainpipe_exec "terminus multidev:create ${{ inputs.site-name }}.live pr-$DRAINPIPE_PR_NUMBER --no-db --no-files --yes"
        fi
        if [ "${{ inputs.run-installer }}" != "true" ]; then
            drainpipe_exec "terminus env:clone-content ${{ inputs.site-name }}.live pr-$DRAINPIPE_PR_NUMBER --yes"
        fi
      shell: bash

    - name: Push to Pantheon
      run: |
        source .github/actions/drainpipe/set-env/bash_aliases
        SITE_ID=$(drainpipe_exec "terminus site:lookup ${{ inputs.site-name }}")
        drainpipe_exec "terminus connection:set  ${{ inputs.site-name }}.pr-$DRAINPIPE_PR_NUMBER git --yes"
        drainpipe_exec "./vendor/bin/task deploy:git directory=/tmp/release branch=pr-$DRAINPIPE_PR_NUMBER remote=ssh://codeserver.dev.$SITE_ID@codeserver.dev.$SITE_ID.drush.in:2222/~/repository.git message=\"${{ inputs.commit-message }}\" site=${{ inputs.site-name }}.pr-$DRAINPIPE_PR_NUMBER"
      shell: bash

    - name: Deploy to Pantheon
      run: |
        source .github/actions/drainpipe/set-env/bash_aliases
        # Wait for Pantheon to sync
        sleep 30
        drainpipe_exec "terminus aliases --only ${{ inputs.site-name }} --yes"
        if [ "${{ inputs.run-installer }}" == "true" ]; then
          drainpipe_exec "./vendor/bin/drush @${{ inputs.site-name }}.pr-$DRAINPIPE_PR_NUMBER --yes site:install --existing-config"
        else
          drainpipe_exec "./vendor/bin/task drupal:update site=@${{ inputs.site-name }}.pr-$DRAINPIPE_PR_NUMBER"
        fi
        ENVIRONMENT_URL="https://pr-$DRAINPIPE_PR_NUMBER-${{ inputs.site-name }}.pantheonsite.io"
        # Lock Environment
        if [ "${{ inputs.lock-username }}" != "" ] && [ "${{ inputs.lock-password }}" != "" ]; then
          drainpipe_exec "terminus lock:enable ${{ inputs.site-name }}.pr-$DRAINPIPE_PR_NUMBER ${{ inputs.lock-username }} ${{ inputs.lock-password }}"
          ENVIRONMENT_URL="https://${{ inputs.lock-username }}:${{ inputs.lock-password }}@pr-$DRAINPIPE_PR_NUMBER-${{ inputs.site-name }}.pantheonsite.io"
        fi
        curl -f -H "Authorization: token ${{ inputs.github-token }}" -X POST -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/$GITHUB_REPOSITORY/deployments/$GITHUB_DEPLOYMENT_ID/statuses -d "{\"state\":\"success\", \"environment_url\": \"$ENVIRONMENT_URL\"}"
      shell: bash

    - name: Set Deployment Failure Status
      run: |
        curl -f -H "Authorization: token ${{ inputs.github-token }}" -X POST -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/$GITHUB_REPOSITORY/deployments/$GITHUB_DEPLOYMENT_ID/statuses -d "{\"state\":\"failure\"}"
      if: ${{ failure() }}
      shell: bash

