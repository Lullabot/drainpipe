.drainpipe_pantheon_drupal_review_app:
  script:
    - !reference [.drainpipe_pantheon_setup_terminus, script]
    - composer install
    - terminus multidev:delete $PANTHEON_SITE_NAME.mr-$CI_MERGE_REQUEST_IID --delete-branch --yes || true
    - |
      if [ "$PANTHEON_MULTIDEV_RUN_INSTALLER" == "true" ]; then
        terminus multidev:create $PANTHEON_SITE_NAME.dev mr-$CI_MERGE_REQUEST_IID --no-db --no-files --yes
      else
        terminus multidev:create $PANTHEON_SITE_NAME.dev mr-$CI_MERGE_REQUEST_IID --yes
      fi
    - |
      # Task is installed globally, not via composer.
      if [ ! -f vendor/bin/task ]; then
        .ddev/web-build/install-task.sh -b /usr/local/bin -d v3.24.0
      fi
    - task build
    - task snapshot:directory
    - task deploy:git
    # Wait for Pantheon to sync
    - sleep 30
    - terminus aliases --only $PANTHEON_SITE_NAME --yes
    - |
      if [ "$PANTHEON_MULTIDEV_RUN_INSTALLER" == "true" ]; then
        ./vendor/bin/drush @$PANTHEON_SITE_NAME.mr-$CI_MERGE_REQUEST_IID --yes site:install --existing-config
      elif ./vendor/bin/task -l | grep '* update: '; then
        ./vendor/bin/task site=@$PANTHEON_SITE_NAME.mr-$CI_MERGE_REQUEST_IID update
      else
        task site=@$PANTHEON_SITE_NAME.mr-$CI_MERGE_REQUEST_IID drupal:update
      fi
    - echo $CI_ENVIRONMENT_URL > environment_url.txt
drainpipe_pantheon_drupal_review_app:
  needs: []
  stage: deploy
  rules:
    # Don't run this on merge trains as it takes a long time
    - if: '$CI_MERGE_REQUEST_EVENT_TYPE == "merge_train"'
      when: never
    - if: '$CI_MERGE_REQUEST_IID'
  interruptible: true
  environment:
    name: review/$CI_MERGE_REQUEST_IID/drupal
    url: https://${REVIEW_APP_BASIC_AUTH}mr-$CI_MERGE_REQUEST_IID-$PANTHEON_SITE_NAME.pantheonsite.io
    on_stop: drainpipe_pantheon_stop_drupal_review_app
  variables:
    directory: /tmp/release
    branch: 'mr-${CI_MERGE_REQUEST_IID}'
    remote: 'ssh://codeserver.dev.${PANTHEON_SITE_ID}@codeserver.dev.${PANTHEON_SITE_ID}.drush.in:2222/~/repository.git'
    message: '${CI_COMMIT_MESSAGE}'
    site: '${PANTHEON_SITE_NAME}.mr-${CI_MERGE_REQUEST_IID}'
  script:
    - !reference [.drainpipe_pantheon_drupal_review_app, script]
  artifacts:
    paths:
      - environment_url.txt

drainpipe_pantheon_stop_drupal_review_app:
  stage: deploy
  rules:
    - if: '$CI_MERGE_REQUEST_IID'
      when: manual
  allow_failure: true
  environment:
    name: review/$CI_MERGE_REQUEST_IID/drupal
    action: stop
  variables:
    remote: '${PANTHEON_GIT_REMOTE}'
  script:
    - !reference [.drainpipe_pantheon_setup_terminus, script]
    - terminus multidev:delete $PANTHEON_SITE_NAME.mr-$CI_MERGE_REQUEST_IID --delete-branch --yes

drainpipe_pantheon_multidev_cleanup:
  needs: []
  resource_group: drainpipe_pantheon_multidev_cleanup
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
  script:
    - !reference [.drainpipe_pantheon_setup_terminus, script]
    - apk add jq
    - |
      for LINE in $(curl -s --fail -H "PRIVATE-TOKEN: $GITLAB_ACCESS_TOKEN" https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/environments | jq -r '.[] | "\(.id),\(.name)"'); do
        ID=$(echo $LINE | cut -f1 -d ',')
        ENVIRONMENT=$(echo $LINE | cut -f2 -d ',')
        MR=$(echo $ENVIRONMENT | cut -f2 -d '/')
        echo "Found GitLab environment $ENVIRONMENT ($ID)"
        # "-eq" used to check if $MR is a number or not.
        if [[ $ENVIRONMENT == review\/* ]] && [ "$MR" -eq "$MR" ]; then
          STATE=$(curl -s --fail -H "PRIVATE-TOKEN: $GITLAB_ACCESS_TOKEN" "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/merge_requests/$MR" | jq -r '.state')
          if [ "$STATE" != "opened" ]; then
            echo "Stopping GitLab environment $ENVIRONMENT ($ID)"
            curl -s --fail -X POST -H "PRIVATE-TOKEN: $GITLAB_ACCESS_TOKEN" "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/environments/$ID/stop"
          fi
        fi
      done
    - |
      for MR in $(terminus multidev:list $PANTHEON_SITE_NAME --format json | jq -r .[].id | cut -d '-' -f2); do
        # Check it's a number.
        if [ "$MR" -eq "$MR" ]; then
          STATE=$(curl -s --fail -H "PRIVATE-TOKEN: $GITLAB_ACCESS_TOKEN" "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/merge_requests/$MR" | jq -r '.state')
          if [ $STATE != "opened" ]; then
            echo "Deleting Pantheon Multidev for $MR"
            terminus --yes multidev:delete $PANTHEON_SITE_NAME.mr-$MR
          fi
        fi
      done
